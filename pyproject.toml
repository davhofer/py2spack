[build-system]
requires = ["hatchling>=1.18"]  # TODO @davhofer: probably add some version constraints here 
build-backend = "hatchling.build"

[project]
name = "py2spack"
authors = [{name = "davhofer", email = "davhofer@ethz.ch"}]
readme = "README.md"
license = {text = "MIT"}
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: System :: Archiving :: Packaging",
  "Topic :: Utilities",
  "Typing :: Typed",
]
description = "Tool to create spack package definitions from distributable Python packages."
dynamic = ["version"]
dependencies = [
    "packaging>=20", 
    "requests>=2.30", 
    "tomli>=1.2",
    "cmake_parser>=0.9.2",
]
[project.optional-dependencies]
tests = ["pytest>=8.0", "pytest-cov>=5.0"]

[project.urls]
Home = "https://github.com/davhofer/py2spack/"

[project.scripts]
py2spack = "py2spack.cli:main"

[tool.hatch.version]
path = "src/py2spack/__init__.py"

[tool.ruff]
    exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 100
show-fixes = true
src = ["src"]

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = false 

[tool.ruff.lint]
extend-safe-fixes = ["D", "TCH"]
extend-select = [
  "A",  # flake8-builtins
  "B",  # flake8-bugbear
  "I",  # isort
  "G",  # flake8-logging-format
  "N",  # pep8-naming
  "W",  # pycodestyle-warning
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  "D",  # pydocstyle
  "D213",  # multi-line-summary-second-line (off by default in pydocstyle "google' convention)
  "PT",  # flake8-pytest-style
  "TD",  # flake8-todo
  "UP",  # pyupgrade
  "ARG",  # flake8-unused-arguments
  "ERA",  # eradicate
  "FLY",  # flynt
  "ICN",  # flake8-import-conventions
  "PERF",  # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",  # pylint
  "PTH",  # flake8-use-pathlib
  "RET",  # flake8-return
  "RUF",  # Ruff-specific
  "SIM",  # flake8-simplify
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
]
ignore = [
    "TD003", # [missing-todo-link]
    "T201", # [print]
]


[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["py2spack"]
known-third-party = [
  "packaging",
  "requests",
  "tomli",
  "typing_extensions",
]
lines-after-imports = 2
order-by-type = true
required-imports = ["from __future__ import annotations"]
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "tests",
  "local-folder",
]

[tool.ruff.lint.isort.sections]
tests = [
  "tests",
]

[tool.ruff.lint.mccabe]
max-complexity = 12

#[tool.ruff.lint.per-file-ignores]
#"tests/**" = [
#  "D",  # pydocstyle
#  "PLR2004",  # [magic-value-comparison]
# "T10",  # flake8-debugger
#  "T20",  # flake8-print
#]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 88

[tool.mypy]
disallow_incomplete_defs = true
disallow_untyped_defs = true
files = ["src"]
ignore_missing_imports = false
implicit_optional = false
implicit_reexport = false
install_types = true
namespace_packages = false
# pretty = true
python_version = "3.10"
show_column_numbers = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true  
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
disallow_incomplete_defs = false
disallow_untyped_defs = false
ignore_missing_imports = true
module = [
  "spack.*",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config", "--ignore=tests/test_data/"]
testpaths = [
    "tests",
]

